package funcs

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"vkbot/config"
	"vkbot/database"
	"vkbot/keyboard"
	"vkbot/utils"
)

func Handle(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	if user.Admin == 1 {
		switch strings.ToLower(event.Object.Message.Text) {
		case "–∑–∞–±–∞–Ω–∏—Ç—å":
			{
				database.UpdateState(user.UserID, utils.GO_BAN_STATE)
				SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ UserID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ó–ê–ë–ê–ù–ò–¢–¨:", "")
				return
			}
		case "—Ä–∞–∑–±–∞–Ω–∏—Ç—å":
			{
				database.UpdateState(user.UserID, utils.GO_UNBAN_STATE)
				SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ UserID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –†–ê–ó–ë–ê–ù–ò–¢–¨:", "")
				return
			}
		case "+–ø–æ–¥–ø–∏—Å–∫–∞":
			{
				database.UpdateState(user.UserID, utils.ADD_STATE)
				SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ UserID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –î–û–ë–ê–í–ò–¢–¨ –ø–æ–¥–ø–∏—Å–∫—É:", "")
				return
			}
		case "-–ø–æ–¥–ø–∏—Å–∫–∞":
			{
				database.UpdateState(user.UserID, utils.POP_STATE)
				SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ UserID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –£–ë–†–ê–¢–¨ –ø–æ–¥–ø–∏—Å–∫—É:", "")
				return
			}
		case "–º–æ–¥–µ—Ä":
			{

			}
		case "-–º–æ–¥–µ—Ä":
			{

			}
		case "—Ä–∞—Å—Å—ã–ª–∫–∞123":
			{

			}
		}
	}
	switch user.State {
	case utils.NAME_STATE:
		handleNameState(event, user)
	case utils.PHOTO_STATE:
		handlePhotoState(event, user, keyboards)
	case utils.MENU_STATE:
		handleMenuState(event, user, keyboards)
	case utils.CHANGE_STATE:
		handleChangeState(event, user, keyboards)
	case utils.CHANGE_NAME_STATE:
		handleChangeNameState(event, user)
	case utils.CHANGE_PHOTO_STATE:
		handleChangePhotoState(event, user, keyboards)
	case utils.CHANGE_PHOTO_UPLOAD_STATE:
		handleChangePhotoUploadState(event, user, keyboards)
	case utils.GO_STATE:
		handleGoState(event, user, keyboards)
	case utils.COMPLAINT_STATE:
		handleComplaintState(event, user, keyboards)
	case utils.CHANGE_ADDRESS_STATE:
		handleChangeAddressState(event, user, keyboards)
	case utils.TOP_STATE:
		handleTopState(event, user, keyboards)
	case utils.GO_MESSAGE_STATE:
		handleGoMessageState(event, user, keyboards)
	case utils.GO_MESSAGE_GRADE_STATE:
		handleGoMessageGradeState(event, user, keyboards)
	case utils.GO_BAN_STATE:
		handleBanState(event, user, keyboards)
	case utils.GO_UNBAN_STATE:
		handleUnbanState(event, user, keyboards)
	case utils.ADD_STATE:
		handleAddState(event, user, keyboards)
	case utils.POP_STATE:
		handlePopState(event, user, keyboards)
	default:
		handleDefaultState(user, keyboards)
	}
}

func handleNameState(event utils.Event, user utils.User) {
	message := event.Object.Message.Text
	messageLength := len([]rune(message))
	if messageLength < 2 || messageLength > 20 {
		SendMessage(user.UserID, "–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è\n\n–í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∏–º—è", "")
		return
	}
	pattern := `[,%*&^$¬£~"#';]`
	re := regexp.MustCompile(pattern)
	if re.MatchString(message) {
		SendMessage(user.UserID, `–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: [,%*&^$¬£~"#';]\n–í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∏–º—è`, "")
		return
	}
	user.Name = message
	database.UpdateUser(user)
	database.UpdateState(user.UserID, utils.PHOTO_STATE)
	SendMessage(user.UserID, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "")
}

func handlePhotoState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	if len(event.Object.Message.Attachments) < 1 {
		SendMessage(user.UserID, "–Ø –∂–¥—É —Ñ–æ—Ç–æ", "")
		return
	}
	attachment := event.Object.Message.Attachments[0]
	if attachment.Type == "photo" {
		uploadURL := GetUploadServer()
		if uploadURL != "" {
			photo := UploadPhoto(uploadURL, *attachment.Photo, user.UserID)
			user.Photo = photo
			user.State = utils.MENU_STATE
			database.UpdateUser(user)
			keyboard, _ := keyboards.KeyboardMain.ToJSON()
			SendMessage(user.UserID, "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.\n–ú–µ–Ω—é:", keyboard)
		}
	}
}

func handleMenuState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	if event.Object.Message.Payload == "" {
		SendMessage(user.UserID, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", "")
		return
	}
	switch event.Object.Message.Payload {
	case `{"value":"my_profile"}`:
		my_profile(user, keyboards)
	case `{"value":"go_grade"}`:
		handleGoGrade(user, keyboards)
	case `{"value":"my_grades"}`:
		handleMyGrades(user)
	case `{"value":"top"}`:
		handleTop(user, keyboards)
	case `{"value":"about"}`:
		handleAbout(user)
	case `{"value":"menu"}`:
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
	}

}

func handleGoGrade(user utils.User, keyboards keyboard.Keyboards) {
	rec_user, recExists, err := database.GetRec(user.UserID)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤ MENU_STATE go_grade %s", err)
		return
	}
	if !recExists {
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª—é–¥–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n–ú–µ–Ω—é:", keyboard)
		return
	}
	message := ""
	if user.Sub == 1 {
		addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, rec_user.Name)
		message = fmt.Sprintf("%s %s", message, addressString)
	}
	var keyboard string
	if user.Admin == 1 {
		keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
	} else {
		keyboard, _ = keyboards.KeyboardGrade.ToJSON()
	}
	user.RecUser = rec_user.UserID
	user.State = utils.GO_STATE
	database.UpdateUser(user)
	SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
}

func handleMyGrades(user utils.User) {
	grades, err := database.GetGrades(user.UserID)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤ MENU_STATE my_grades: %s", err)
		return
	}
	if len(grades) == 0 {
		SendMessage(user.UserID, "–í–∞—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª, –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —á–∞—â–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏.", "")
		return
	}
	for _, grade := range grades {
		if grade.User.Ban == 1 {
			SendMessage(user.UserID, "üëÆ‚Äç‚ôÇÔ∏è–û—Ü–µ–Ω–∫–∞ –æ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º—ã —Å–∫—Ä—ã–ª–∏ –µ–≥–æ.", "")
		}
		message := fmt.Sprintf("üßí–ò–º—è –æ—Ü–µ–Ω—â–∏–∫–∞ %s\n‚≠ê–û—Ü–µ–Ω–∏–ª –≤–∞—Å –Ω–∞ %d/10\n", grade.User.Name, grade.Grade)
		if grade.User.Address == 1 || user.Sub == 1 || user.Admin == 1 {
			addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", grade.User.UserID, grade.User.Name)
			message = fmt.Sprintf("%s%s", message, addressString)
		}
		message = fmt.Sprintf("%s%s", message, "üëáüèª–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞üëáüèª")
		SendPhoto(user.UserID, grade.User.Photo, message, "")
	}
}

func handleTop(user utils.User, keyboards keyboard.Keyboards) {
	users, _ := database.Top()
	if len(users) < 1 {
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		database.UpdateState(user.UserID, utils.MENU_STATE)
		SendMessage(user.UserID, "–¢–æ–ø –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", keyboard)
		return
	}
	message := fmt.Sprintf("ü•á–¢–û–ü 1\n\nüçÄ–ò–º—è: %s", users[0].Name)
	if users[0].Address == 1 || user.Admin == 1 || user.Sub == 1 {
		addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", users[0].UserID, users[0].Name)
		message = fmt.Sprintf("%s%s", message, addressString)
	}
	var score float32
	if users[0].People != 0 {
		score = float32(users[0].Score) / float32(users[0].People)
	} else {
		score = 0
	}
	tempMessage := fmt.Sprintf("\n‚≠ê–§–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞: %.2f/10\nüë•–û—Ü–µ–Ω–∏–ª–∏ %d —á–µ–ª–æ–≤–µ–∫", score, users[0].People)
	message = fmt.Sprintf("%s%s", message, tempMessage)
	database.UpdateState(user.UserID, utils.TOP_STATE)
	keyboard, _ := keyboards.KeyboardTop.ToJSON()
	SendPhoto(user.UserID, users[0].Photo, message, keyboard)
}

func handleAbout(user utils.User) {
	message := `üëª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ü–µ–Ω—è—Ç —Ç–≤–æ—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10, –∏ –æ—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏—Ö.\n\n
	üí°–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –∏–¥–µ—è –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ª–∏–±–æ —Ç—ã –Ω–∞—à–µ–ª –±–∞–≥ –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @lil_chilllll\n\n
	‚ö°Ô∏è–ö—Å—Ç–∞—Ç–∏ –º—ã –¥–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∏–±–∏–Ω—Ç–æ, —á–µ–∫–Ω–∏: bibinto.com `
	SendMessage(user.UserID, message, "")
}

func handleChangeState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"change_name"}`:
		database.UpdateState(user.UserID, utils.CHANGE_NAME_STATE)
		SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", "")
	case `{"value":"change_photo"}`:
		database.UpdateState(user.UserID, utils.CHANGE_PHOTO_STATE)
		keyboard, _ := keyboards.KeyboardYesNo.ToJSON()
		SendMessage(user.UserID, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ?", keyboard)
	case `{"value":"sub"}`:
		handleSubscription(user, keyboards)
	case `{"value":"buy_check"}`:
		if user.Sub != 1 {
			result, _ := CheckBuySub(user.UserID)
			if result {
				user.Sub = 1
				database.UpdateUser(user)
				keyboard, _ := keyboards.KeyboardProfile.ToJSON()
				SendMessage(user.UserID, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", keyboard)

			}
			SendMessage(user.UserID, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "")
			return
		}
		keyboard, _ := keyboards.KeyboardProfile.ToJSON()
		SendMessage(user.UserID, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, —Ç—ã –≤–∏–¥–∏—à—å —Å–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –ª—é–¥–µ–π.", keyboard)
	case `{"value":"buy"}`:
		buyUrl := "https://yoomoney.ru/quickpay/confirm.xml?receiver=4100117730854038&quickpay-form=shop&targets=–ë–∏–±–∏–Ω—Ç–æ%20–í–ö&paymentType=SB&sum=100&label=159236101"
		message := fmt.Sprintf("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' \n%s\n\n–í–∫ –º–æ–∂–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Ç–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.", buyUrl)
		SendMessage(user.UserID, message, "")
	case `{"value":"account_link"}`:
		database.UpdateState(user.UserID, utils.CHANGE_ADDRESS_STATE)
		keyboard, _ := keyboards.KeyboardYesNo.ToJSON()
		SendMessage(user.UserID, "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", keyboard)
	case `{"value":"back"}`:
		my_profile(user, keyboards)
	case `{"value":"menu"}`:
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
	}
}

func handleSubscription(user utils.User, keyboards keyboard.Keyboards) {
	if user.Sub == 1 {
		SendMessage(user.UserID, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –≤—ã –≤–∏–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –ª—é–¥–µ–π.", "")
		return
	}
	keyboard, _ := keyboards.KeyboardBuySub.ToJSON()
	SendMessage(user.UserID, "–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ 100—Ä (–º–µ—Å—è—Ü)\n\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –í—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª—é–¥–µ–π –¥–∞–∂–µ –∫–æ–≥–¥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ", keyboard)
}

func handleChangeNameState(event utils.Event, user utils.User) {
	text := event.Object.Message.Text
	messageLength := len([]rune(text))
	if messageLength < 2 || messageLength > 20 {
		SendMessage(user.UserID, "–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è\n\n–í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∏–º—è", "")
		return
	}
	pattern := `[,%*&^$¬£~"#';]`
	re := regexp.MustCompile(pattern)
	if re.MatchString(text) {
		SendMessage(user.UserID, `–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: [,%*&^$¬£~"#';]\n–í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∏–º—è`, "")
		return
	}
	user.Name = text
	user.State = utils.CHANGE_STATE
	database.UpdateUser(user)
	SendMessage(user.UserID, "–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", "")
}

func handleChangePhotoState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"yes"}`:
		database.UpdateState(user.UserID, utils.CHANGE_PHOTO_UPLOAD_STATE)
		SendMessage(user.UserID, "–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ", "")
	case `{"value":"no"}`:
		my_profile(user, keyboards)
	case `{"value":"back"}`:
		my_profile(user, keyboards)
	case `{"value":"menu"}`:
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
	default:
		SendMessage(user.UserID, "–Ø –∂–¥—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å...\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –î–∞ –∏–ª–∏ –ù–µ—Ç –≤–Ω–∏–∑—Éüëáüèª", "")
	}
}

func handleChangePhotoUploadState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	if len(event.Object.Message.Attachments) < 1 {
		SendMessage(user.UserID, "–Ø –∂–¥—É —Ñ–æ—Ç–æ", "")
		return
	}
	attachment := event.Object.Message.Attachments[0]
	if attachment.Type == "photo" {
		uploadURL := GetUploadServer()
		if uploadURL != "" {
			photo := UploadPhoto(uploadURL, *attachment.Photo, user.UserID)
			user.Photo = photo
			user.State = utils.MENU_STATE
			database.UpdateUser(user)
			keyboard, _ := keyboards.KeyboardMain.ToJSON()
			SendMessage(user.UserID, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.\n–ú–µ–Ω—é:", keyboard)
		}
	}
}

func handleGoState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"menu"}`:
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
	case `{"value":"grade_report"}`:
		database.UpdateState(user.UserID, utils.COMPLAINT_STATE)
		keyboard, _ := keyboards.KeyboardReportChoose.ToJSON()
		SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã —Ç–µ–∫—Å—Ç–æ–º!\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ", keyboard)
	case `{"value":"grade_message"}`:
		database.UpdateState(user.UserID, utils.GO_MESSAGE_STATE)
		keyboard, _ := keyboards.KeyboardBack.ToJSON()
		SendMessage(user.UserID, "–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–µ:", keyboard)
	case `{"value":"grade_ban"}`:
		handleGradeBan(user, keyboards)
	case `{"value":"grade_1"}`:
		createGrade(1, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_2"}`:
		createGrade(2, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_3"}`:
		createGrade(3, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_4"}`:
		createGrade(4, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_5"}`:
		createGrade(5, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_6"}`:
		createGrade(6, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_7"}`:
		createGrade(7, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_8"}`:
		createGrade(8, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_9"}`:
		createGrade(9, user, "")
		goGrade(user, keyboards, "")
	case `{"value":"grade_10"}`:
		createGrade(10, user, "")
		goGrade(user, keyboards, "")
	}
}

func handleGradeBan(user utils.User, keyboards keyboard.Keyboards) {
	if user.Admin != 1 {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, —á—Ç–æ–±—ã –±–∞–Ω–∏—Ç—å", keyboard)
		return
	}
	database.Ban(uint64(user.RecUser))
	message := fmt.Sprintf("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!\n–ï–≥–æ id: %d\n\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", user.RecUser, user.RecUser, "–ü—Ä–æ—Ñ–∏–ª—å")
	rec_user, recExists, err := database.GetRec(user.UserID)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤ MENU_STATE go_grade %s", err)
		return
	}
	if !recExists {
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª—é–¥–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n–ú–µ–Ω—é:", keyboard)
		return
	}
	if user.Sub == 1 {
		addressString := fmt.Sprintf("\n\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, rec_user.Name)
		message = fmt.Sprintf("%s %s", message, addressString)
	}
	var keyboard string
	if user.Admin == 1 {
		keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
	} else {
		keyboard, _ = keyboards.KeyboardGrade.ToJSON()
	}
	user.RecUser = rec_user.UserID
	user.State = utils.GO_STATE
	database.UpdateUser(user)
	SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
}

func handleComplaintState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	var adminMessage string
	switch event.Object.Message.Payload {
	case `{"value":"report_18+"}`:
		adminMessage = fmt.Sprintf("–ñ–∞–ª–æ–±–∞ (18+) –æ—Ç %s|%d –Ω–∞ %d", user.Name, user.UserID, user.RecUser)
	case `{"value":"report_younger_14"}`:
		adminMessage = fmt.Sprintf("–ñ–∞–ª–æ–±–∞ (–ú–ª–∞–¥—à–µ 14) –æ—Ç %s|%d –Ω–∞ %d", user.Name, user.UserID, user.RecUser)
	case `{"value":"spam"}`:
		adminMessage = fmt.Sprintf("–ñ–∞–ª–æ–±–∞ (–°–ø–∞–º) –æ—Ç %s|%d –Ω–∞ %d", user.Name, user.UserID, user.RecUser)
	case `{"value":"back"}`:
		goGrade(user, keyboards, "")
	}
	SendMessage(config.AppConfig.ReportAdmin, adminMessage, "")
	goGrade(user, keyboards, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–∞–ª–æ–±—É, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
}

func handleChangeAddressState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"yes"}`:
		user.Address = 1
		user.State = utils.CHANGE_STATE
		database.UpdateUser(user)
		keyboard, _ := keyboards.KeyboardProfile.ToJSON()
		SendMessage(user.UserID, "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –í–ò–î–ù–ê –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", keyboard)
	case `{"value":"no"}`:
		user.Address = 0
		user.State = utils.CHANGE_STATE
		database.UpdateUser(user)
		keyboard, _ := keyboards.KeyboardProfile.ToJSON()
		SendMessage(user.UserID, "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ù–ï –í–ò–î–ù–ê –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", keyboard)
	case `{"value":"back"}`:
		my_profile(user, keyboards)
	case `{"value":"menu"}`:
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
	}
}

func handleTopState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"top_1"}`:
		handleTopPosition(0, user, keyboards)
	case `{"value":"top_2"}`:
		handleTopPosition(1, user, keyboards)
	case `{"value":"top_3"}`:
		handleTopPosition(2, user, keyboards)
	case `{"value":"top_10"}`:
		handleTop10(user, keyboards)
	case `{"value":"my_top_position"}`:
		handleMyTopPosition(user)
	case `{"value":"menu"}`:
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		database.UpdateState(user.UserID, utils.MENU_STATE)
		SendMessage(user.UserID, "–ú–µ–Ω—é", keyboard)
	}
}

func handleTopPosition(index int, user utils.User, keyboards keyboard.Keyboards) {
	users, _ := database.Top()
	if len(users) <= index {
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		database.UpdateState(user.UserID, utils.MENU_STATE)
		SendMessage(user.UserID, "–¢–æ–ø –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", keyboard)
		return
	}
	message := fmt.Sprintf("ü•á–¢–û–ü %d\n\nüçÄ–ò–º—è: %s", index+1, users[index].Name)
	if users[index].Address == 1 || user.Admin == 1 || user.Sub == 1 {
		addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", users[index].UserID, users[index].Name)
		message = fmt.Sprintf("%s%s", message, addressString)
	}
	var score float32
	if users[index].People != 0 {
		score = float32(users[index].Score) / float32(users[index].People)
	} else {
		score = 0
	}
	tempMessage := fmt.Sprintf("\n‚≠ê–§–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞: %.2f/10\nüë•–û—Ü–µ–Ω–∏–ª–∏ %d —á–µ–ª–æ–≤–µ–∫", score, users[index].People)
	message = fmt.Sprintf("%s%s", message, tempMessage)
	keyboard, _ := keyboards.KeyboardTop.ToJSON()
	SendPhoto(user.UserID, users[index].Photo, message, keyboard)
}

func handleTop10(user utils.User, keyboards keyboard.Keyboards) {
	top10, _ := database.Top10()
	var photos string
	for _, photo := range top10 {
		photos = fmt.Sprintf("%s, %s", photos, photo)
	}
	if photos == "" {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–¢–æ–ø –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", keyboard)
		return
	}
	SendPhoto(user.UserID, photos, "", "")
}

func handleMyTopPosition(user utils.User) {
	my_top, _ := database.MyTop(user.UserID)
	message := fmt.Sprintf("–¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: %d", my_top)
	SendMessage(user.UserID, message, "")
}

func handleGoMessageState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"back"}`:
		rec_user, _, _ := database.GetUser(user.RecUser)
		var message string
		if user.Sub == 1 {
			addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, "–°—Å—ã–ª–∫–∞")
			message = fmt.Sprintf("%s %s", message, addressString)
		}
		var keyboard string
		if user.Admin == 1 {
			keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
		} else {
			keyboard, _ = keyboards.KeyboardGrade.ToJSON()
		}
		user.RecUser = rec_user.UserID
		user.State = utils.GO_STATE
		database.UpdateUser(user)
		SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
	default:
		handleGoMessageText(event, user, keyboards)
	}
}

func handleGoMessageText(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	if len(event.Object.Message.Text) > 100 {
		SendMessage(user.UserID, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n–ù–∞–ø–∏—à–∏ –º–µ–Ω—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.", "")
		return
	}
	if len(event.Object.Message.Text) < 2 {
		SendMessage(user.UserID, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.", "")
		return
	}
	user.State = utils.GO_MESSAGE_GRADE_STATE
	user.RecMess = event.Object.Message.Text
	database.UpdateUser(user)
	var keyboard string
	if user.Admin == 1 {
		keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
	} else {
		keyboard, _ = keyboards.KeyboardGrade.ToJSON()
	}
	SendMessage(user.UserID, "–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É:", keyboard)
}

func my_profile(user utils.User, keyboards keyboard.Keyboards) {
	var score float32
	if user.People != 0 {
		score = float32(user.Score) / float32(user.People)
	} else {
		score = 0
	}
	message := fmt.Sprintf("üçÄ–ò–º—è: %s\n\n‚≠ê–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞: %.2f/10\nüë•–í–∞—Å –æ—Ü–µ–Ω–∏–ª–∏ %d —á–µ–ª–æ–≤–µ–∫", user.Name, score, user.People)
	if user.Address == 1 {
		addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", user.UserID, user.Name)
		message = fmt.Sprintf("%s %s", message, addressString)
	}
	if user.Sub == 1 {
		message = fmt.Sprintf("%s %s", message, "\n‚ö°–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞‚ö°")
	}
	database.UpdateState(user.UserID, utils.CHANGE_STATE)
	keyboard, _ := keyboards.KeyboardProfile.ToJSON()
	SendPhoto(user.UserID, user.Photo, message, keyboard)
}

func createGrade(grade int, user utils.User, message string) {
	if message != "" {
		database.AddGrade(user.RecUser, user.UserID, grade, &message)
	} else {
		database.AddGrade(user.RecUser, user.UserID, grade, nil)
	}
}

func goGrade(user utils.User, keyboards keyboard.Keyboards, extraMessage string) {
	rec_user, recExists, err := database.GetRec(user.UserID)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤ goGrade() %s", err)
		return
	}
	if !recExists {
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		message := "–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª—é–¥–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n–ú–µ–Ω—é:"
		if extraMessage != "" {
			message = fmt.Sprintf("%s\n\n%s", extraMessage, message)
		}
		SendMessage(user.UserID, message, keyboard)
		return
	}
	var message string
	if extraMessage != "" {
		message = fmt.Sprintf("%s\n\n%s", extraMessage, message)
	}
	if user.Sub == 1 {
		addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, rec_user.Name)
		message = fmt.Sprintf("%s %s", message, addressString)
	}
	var keyboard string
	if user.Admin == 1 {
		keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
	} else {
		keyboard, _ = keyboards.KeyboardGrade.ToJSON()
	}
	user.RecUser = rec_user.UserID
	user.State = utils.GO_STATE
	database.UpdateUser(user)
	SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
}

func handleGoMessageGradeState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	switch event.Object.Message.Payload {
	case `{"value":"back"}`:
		{
			rec_user, _, _ := database.GetUser(user.RecUser)
			var message string
			if user.Sub == 1 {
				addressString := fmt.Sprintf("\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, "–°—Å—ã–ª–∫–∞")
				message = fmt.Sprintf("%s %s", message, addressString)
			}
			var keyboard string
			if user.Admin == 1 {
				keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
			} else {
				keyboard, _ = keyboards.KeyboardGrade.ToJSON()
			}
			user.RecUser = rec_user.UserID
			user.State = utils.GO_STATE
			database.UpdateUser(user)
			SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
		}
	case `{"value":"grade_report"}`:
		{
			database.UpdateState(user.UserID, utils.COMPLAINT_STATE)
			keyboard, _ := keyboards.KeyboardReportChoose.ToJSON()
			SendMessage(user.UserID, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã —Ç–µ–∫—Å—Ç–æ–º!\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ", keyboard)
		}
	case `{"value":"grade_ban"}`:
		{
			if user.Admin != 1 {
				database.UpdateState(user.UserID, utils.MENU_STATE)
				keyboard, _ := keyboards.KeyboardMain.ToJSON()
				SendMessage(user.UserID, "–¢—ã –Ω–µ –∞–¥–º–∏–Ω, —á—Ç–æ–±—ã –±–∞–Ω–∏—Ç—å", keyboard)
				return
			}
			database.Ban(uint64(user.RecUser))
			message := fmt.Sprintf("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!\n–ï–≥–æ id: %d\n\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", user.RecUser, user.RecUser, "–ü—Ä–æ—Ñ–∏–ª—å")
			rec_user, recExists, err := database.GetRec(user.UserID)
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –≤ MENU_STATE go_grade %s", err)
				return
			}
			if !recExists {
				keyboard, _ := keyboards.KeyboardMain.ToJSON()
				SendMessage(user.UserID, "–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª—é–¥–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n–ú–µ–Ω—é:", keyboard)
				return
			}
			if user.Sub == 1 {
				addressString := fmt.Sprintf("\n\nüìé–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: @id%d(%s)", rec_user.UserID, rec_user.Name)
				message = fmt.Sprintf("%s %s", message, addressString)
			}
			var keyboard string
			if user.Admin == 1 {
				keyboard, _ = keyboards.KeyboardGradeModer.ToJSON()
			} else {
				keyboard, _ = keyboards.KeyboardGrade.ToJSON()
			}
			user.RecUser = rec_user.UserID
			user.State = utils.GO_STATE
			database.UpdateUser(user)
			SendPhoto(user.UserID, rec_user.Photo, message, keyboard)
		}
	case `{"value":"grade_message"}`:
		{
			SendMessage(user.UserID, "–¢—ã —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ, –ø–æ—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É", "")
		}
	case `{"value":"menu"}`:
		{
			database.UpdateState(user.UserID, utils.MENU_STATE)
			keyboard, _ := keyboards.KeyboardMain.ToJSON()
			SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
		}
	case `{"value":"grade_1"}`:
		{
			createGrade(1, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_2"}`:
		{
			createGrade(2, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_3"}`:
		{
			createGrade(3, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_4"}`:
		{
			createGrade(4, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_5"}`:
		{
			createGrade(5, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_6"}`:
		{
			createGrade(6, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_7"}`:
		{
			createGrade(7, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_8"}`:
		{
			createGrade(8, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_9"}`:
		{
			createGrade(9, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	case `{"value":"grade_10"}`:
		{
			createGrade(10, user, user.RecMess)
			goGrade(user, keyboards, "")
		}
	}
}

func handleDefaultState(user utils.User, keyboards keyboard.Keyboards) {
	// –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∏–º—è –∏ —Ñ–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if user.Name == "None" || user.Photo == "None" || user.Name == "" || user.Photo == "" {
		// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–æ—Ç–æ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∏–º—è
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–µ–Ω—é
		database.UpdateState(user.UserID, utils.NAME_STATE)
		SendMessage(user.UserID, "–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –µ–µ –∑–∞–Ω–æ–≤–æ.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è:", "")
		return
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–µ–Ω—é
	database.UpdateState(user.UserID, utils.MENU_STATE)
	keyboard, err := keyboards.KeyboardMain.ToJSON()
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ handle default %s", err)
		return
	}
	SendMessage(user.UserID, "–ú–µ–Ω—é:", keyboard)
}

func handleBanState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	useridString := event.Object.Message.Text
	userid, err := strconv.ParseUint(useridString, 10, 0) // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ 10, 0 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	if err != nil {
		SendMessage(user.UserID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: 832787473", "")
		return
	}
	err = database.Ban(userid)
	if err != nil {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id", keyboard)
		return
	}
	database.UpdateState(user.UserID, utils.MENU_STATE)
	keyboard, _ := keyboards.KeyboardMain.ToJSON()
	SendMessage(user.UserID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω", keyboard)

}

func handleUnbanState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	useridString := event.Object.Message.Text
	userid, err := strconv.ParseUint(useridString, 10, 0) // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ 10, 0 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	if err != nil {
		SendMessage(user.UserID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: 832787473", "")
		return
	}
	err = database.Unban(userid)
	if err != nil {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id", keyboard)
		return
	}
	database.UpdateState(user.UserID, utils.MENU_STATE)
	keyboard, _ := keyboards.KeyboardMain.ToJSON()
	SendMessage(user.UserID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω", keyboard)
}

func handleAddState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	useridString := event.Object.Message.Text
	userid, err := strconv.ParseUint(useridString, 10, 0) // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ 10, 0 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	if err != nil {
		SendMessage(user.UserID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: 832787473", "")
		return
	}
	err = database.AddSub(userid)
	if err != nil {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–∫–∏–º id", keyboard)
		return
	}
	database.UpdateState(user.UserID, utils.MENU_STATE)
	keyboard, _ := keyboards.KeyboardMain.ToJSON()
	SendMessage(user.UserID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞", keyboard)
}

func handlePopState(event utils.Event, user utils.User, keyboards keyboard.Keyboards) {
	useridString := event.Object.Message.Text
	userid, err := strconv.ParseUint(useridString, 10, 0) // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ 10, 0 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	if err != nil {
		SendMessage(user.UserID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: 832787473", "")
		return
	}
	err = database.PopSub(userid)
	if err != nil {
		database.UpdateState(user.UserID, utils.MENU_STATE)
		keyboard, _ := keyboards.KeyboardMain.ToJSON()
		SendMessage(user.UserID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id", keyboard)
		return
	}
	database.UpdateState(user.UserID, utils.MENU_STATE)
	keyboard, _ := keyboards.KeyboardMain.ToJSON()
	SendMessage(user.UserID, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞", keyboard)
}
